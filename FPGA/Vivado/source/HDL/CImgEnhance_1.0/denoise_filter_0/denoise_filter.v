// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="denoise_filter,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.907000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=57,HLS_SYN_LUT=64,HLS_VERSION=2019_1}" *)

module denoise_filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in0,
        in1,
        in2,
        out_r,
        out_r_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in0;
input  [7:0] in1;
input  [7:0] in2;
output  [7:0] out_r;
output   out_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] regRow1_0;
reg   [7:0] regRow1_1;
reg   [7:0] regRow0_0;
reg   [7:0] regRow0_1;
reg   [7:0] regRow0_2;
reg   [7:0] regCol0_0;
reg   [7:0] regCol0_1;
wire   [8:0] zext_ln21_1_fu_75_p1;
wire   [8:0] zext_ln21_fu_67_p1;
wire   [8:0] add_ln21_fu_79_p2;
wire   [8:0] zext_ln23_1_fu_108_p1;
wire   [8:0] zext_ln23_fu_100_p1;
wire   [8:0] add_ln23_fu_112_p2;
wire   [8:0] zext_ln31_1_fu_168_p1;
wire   [8:0] zext_ln31_fu_160_p1;
wire   [8:0] add_ln31_fu_172_p2;
wire   [8:0] zext_ln33_1_fu_198_p1;
wire   [8:0] zext_ln33_fu_194_p1;
wire   [8:0] add_ln33_fu_202_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 regRow1_0 = 8'd0;
#0 regRow1_1 = 8'd0;
#0 regRow0_0 = 8'd0;
#0 regRow0_1 = 8'd0;
#0 regRow0_2 = 8'd0;
#0 regCol0_0 = 8'd0;
#0 regCol0_1 = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        regCol0_0 <= {{add_ln33_fu_202_p2[8:1]}};
        regCol0_1 <= in2;
        regRow0_0 <= {{add_ln31_fu_172_p2[8:1]}};
        regRow0_1 <= regRow0_0;
        regRow0_2 <= regRow0_1;
        regRow1_0 <= {{add_ln23_fu_112_p2[8:1]}};
        regRow1_1 <= regRow0_2;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_79_p2 = (zext_ln21_1_fu_75_p1 + zext_ln21_fu_67_p1);

assign add_ln23_fu_112_p2 = (zext_ln23_1_fu_108_p1 + zext_ln23_fu_100_p1);

assign add_ln31_fu_172_p2 = (zext_ln31_1_fu_168_p1 + zext_ln31_fu_160_p1);

assign add_ln33_fu_202_p2 = (zext_ln33_1_fu_198_p1 + zext_ln33_fu_194_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign out_r = {{add_ln21_fu_79_p2[8:1]}};

assign zext_ln21_1_fu_75_p1 = regRow1_1;

assign zext_ln21_fu_67_p1 = regRow1_0;

assign zext_ln23_1_fu_108_p1 = regRow0_1;

assign zext_ln23_fu_100_p1 = regRow0_0;

assign zext_ln31_1_fu_168_p1 = regCol0_1;

assign zext_ln31_fu_160_p1 = regCol0_0;

assign zext_ln33_1_fu_198_p1 = in1;

assign zext_ln33_fu_194_p1 = in0;

endmodule //denoise_filter
